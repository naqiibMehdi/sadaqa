openapi: 3.0.3
info:
  title: 'Laravel API Documentation'
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost'
tags:
  -
    name: Authentification
    description: ''
  -
    name: Cagnottes
    description: ''
  -
    name: Endpoints
    description: ''
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: 'You can retrieve your token by visiting your dashboard and clicking <b>Generate API token</b>.'
security:
  -
    default: []
paths:
  /api/auth/register:
    post:
      summary: 'Créer un compte'
      operationId: crerUnCompte
      description: 'Permet à un utilisateur de créer un compte'
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'votre compte a été crée avec succès'
                properties:
                  message:
                    type: string
                    example: 'votre compte a été crée avec succès'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Le nom de famille est obligatoire. (and 5 more errors)'
                  errors:
                    name:
                      - 'Le nom de famille est obligatoire.'
                    first_name:
                      - 'Le prénom est obligatoire'
                    public_name:
                      - 'Le nom publique est obligatoire'
                    birth_date:
                      - 'La date de naissance est obligatoire'
                    email:
                      - "L'email est obligatoire"
                    password:
                      - 'Le mot de passe est obligatoire'
                properties:
                  message:
                    type: string
                    example: 'Le nom de famille est obligatoire. (and 5 more errors)'
                  errors:
                    type: object
                    properties:
                      name:
                        type: array
                        example:
                          - 'Le nom de famille est obligatoire.'
                        items:
                          type: string
                      first_name:
                        type: array
                        example:
                          - 'Le prénom est obligatoire'
                        items:
                          type: string
                      public_name:
                        type: array
                        example:
                          - 'Le nom publique est obligatoire'
                        items:
                          type: string
                      birth_date:
                        type: array
                        example:
                          - 'La date de naissance est obligatoire'
                        items:
                          type: string
                      email:
                        type: array
                        example:
                          - "L'email est obligatoire"
                        items:
                          type: string
                      password:
                        type: array
                        example:
                          - 'Le mot de passe est obligatoire'
                        items:
                          type: string
      tags:
        - Authentification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "Le nom de l'utilisateur."
                  example: Doe
                  nullable: false
                first_name:
                  type: string
                  description: "Le prénom de l'utilisateur."
                  example: John
                  nullable: false
                public_name:
                  type: string
                  description: "Le nom publique de l'utilisateur."
                  example: Pikachu
                  nullable: false
                birth_date:
                  type: date
                  description: 'La date de naissance.'
                  example: 26/03/2009
                  nullable: false
                email:
                  type: string
                  description: "Le mot de passe de l'utilisateur."
                  example: john@doe.fr
                  nullable: false
                password:
                  type: string
                  description: "Le mot de passe de l'utilisateur."
                  example: 'John1doe*'
                  nullable: false
              required:
                - name
                - first_name
                - public_name
                - birth_date
                - email
                - password
      security: []
  /api/auth/login:
    post:
      summary: 'Se connecter'
      operationId: seConnecter
      description: 'Permet à un utilisateur de se connecter avec ses identifiants'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  token: '!256fdgdfg8123gfdgdfgr'
                properties:
                  token:
                    type: string
                    example: '!256fdgdfg8123gfdgdfgr'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "L'email est obligatoire (and 1 more error)"
                  errors:
                    email:
                      - "L'email est obligatoire"
                    password:
                      - 'Le mot de passe est obligatoire'
                properties:
                  message:
                    type: string
                    example: "L'email est obligatoire (and 1 more error)"
                  errors:
                    type: object
                    properties:
                      email:
                        type: array
                        example:
                          - "L'email est obligatoire"
                        items:
                          type: string
                      password:
                        type: array
                        example:
                          - 'Le mot de passe est obligatoire'
                        items:
                          type: string
      tags:
        - Authentification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: "L'email de l'utilisateur."
                  example: null
                  nullable: false
                password:
                  type: string
                  description: "Le mot de passe de l'utilisateur."
                  example: null
                  nullable: false
              required:
                - email
                - password
      security: []
  /api/auth/logout:
    post:
      summary: 'Se déconnecter'
      operationId: seDconnecter
      description: 'Permet à un utilisateur de se déconnecter de sa session'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n  \"message\" => \"token supprimé avec succès\"\n}"
      tags:
        - Authentification
  /api/campaigns:
    get:
      summary: 'Afficher les cagnottes'
      operationId: afficherLesCagnottes
      description: "Permet d'afficher 9 cagnottes par page"
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n \"data\": [\n   {\n     \"id\": 19,\n     \"title\": \"Dolorem qui corrupti qui ducimus iste quo enim dolores odit atque repellendus.\",\n     \"description\": \"Sunt provident et sed dolorem. Qui similique voluptate fuga maxime eveniet.\",\n     \"slug\": \"perspiciatis-eos-consequatur-assumenda-quia-quae-saepe\",\n     \"target_amount\": 52776,\n     \"collected_amount\": 587,\n     \"created_at\": \"2025-03-18T23:18:17+00:00\",\n     \"limit_date\": \"2025-04-29T11:23:01+00:00\",\n     \"category_id\": 6,\n     \"closing_date\": \"2025-03-13T17:46:57+00:00\",\n     \"url_image\": \"http://localhost:8000/storage/campaigns/default_cover_campaign.png\",\n     \"user\": {\n       \"id\": 4,\n       \"name\": \"Jean Delaunay\",\n       \"first_name\": \"Thomas\",\n       \"public_name\": \"Claudine Pineau\",\n       \"birth_date\": \"1999-01-29T00:00:00+00:00\",\n       \"email\": \"laetitia99@example.org\",\n       \"subscribe_date\": \"2013-08-04T00:00:00+00:00\",\n       \"image_profile\": \"http://localhost:8000/storage/profile/3LadULEk1ydAR7sylwtkSXSGAGF4B2YwKGeL6JQU.jpg\"\n     },\n     \"participants\": []\n   },\n ],\n \"links\": {\n \"first\": \"http://localhost:8000/api/campaigns?page=1\",\n \"last\": \"http://localhost:8000/api/campaigns?page=3\",\n \"prev\": \"http://localhost:8000/api/campaigns?page=2\",\n \"next\": null\n },\n \"meta\": {\n   \"current_page\": 3,\n   \"from\": 19,\n   \"last_page\": 3,\n   \"links\": [\n     {\n       \"url\": \"http://localhost:8000/api/campaigns?page=2\",\n       \"label\": \"pagination.previous\",\n       \"active\": false\n     },\n     {\n       \"url\": \"http://localhost:8000/api/campaigns?page=1\",\n       \"label\": \"1\",\n       \"active\": false\n     },\n     {\n       \"url\": \"http://localhost:8000/api/campaigns?page=2\",\n       \"label\": \"2\",\n       \"active\": false\n     },\n     {\n       \"url\": \"http://localhost:8000/api/campaigns?page=3\",\n       \"label\": \"3\",\n       \"active\": true\n     },\n     {\n       \"url\": null,\n       \"label\": \"pagination.next\",\n       \"active\": false\n     }\n],\n   \"path\": \"http://localhost:8000/api/campaigns\",\n   \"per_page\": 9,\n   \"to\": 26,\n   \"total\": 26\n }\n}"
        404:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n  \"message\" => \"Aucune campagnes disponible\"\n}"
      tags:
        - Cagnottes
      security: []
    post:
      summary: 'Permet de créer une cagnotte'
      operationId: permetDeCrerUneCagnotte
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Cagnottes
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: ''
                  example: architecto
                  nullable: false
                description:
                  type: string
                  description: ''
                  example: 'Eius et animi quos velit et.'
                  nullable: false
                image:
                  type: string
                  format: binary
                  description: 'validation.image validation.max.'
                  nullable: true
                target_amount:
                  type: number
                  description: validation.min.
                  example: 16
                  nullable: false
                limit_date:
                  type: string
                  description: validation.date.
                  example: '2025-04-27T18:19:27'
                  nullable: true
                category_id:
                  type: number
                  description: 'The <code>id</code> of an existing record in the categories table.'
                  example: 4326.41688
                  nullable: false
              required:
                - title
                - description
                - target_amount
                - category_id
      security: []
  '/api/campaigns/{slug}-{id}':
    get:
      summary: "Permet d'afficher une seule cagnotte"
      operationId: permetDafficherUneSeuleCagnotte
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "Cette cagnotte n'existe pas"
                properties:
                  message:
                    type: string
                    example: "Cette cagnotte n'existe pas"
      tags:
        - Cagnottes
      security: []
    delete:
      summary: 'Permet de supprimer une cagnotte'
      operationId: permetDeSupprimerUneCagnotte
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Cagnottes
      security: []
    parameters:
      -
        in: path
        name: slug
        description: 'The slug of the .'
        example: 0cl
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'The ID of the .'
        example: '564'
        required: true
        schema:
          type: string
  '/api/campaigns/{slug}-{id}/edit':
    put:
      summary: 'permet de mettre à jour une cagnotte'
      operationId: permetDeMettreJourUneCagnotte
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Cagnottes
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: ''
                  example: architecto
                  nullable: false
                description:
                  type: string
                  description: ''
                  example: 'Eius et animi quos velit et.'
                  nullable: false
                image:
                  type: string
                  format: binary
                  description: 'validation.image validation.max.'
                  nullable: true
                target_amount:
                  type: number
                  description: validation.min.
                  example: 16
                  nullable: false
                limit_date:
                  type: string
                  description: validation.date.
                  example: '2025-04-27T18:19:28'
                  nullable: true
                category_id:
                  type: number
                  description: 'The <code>id</code> of an existing record in the categories table.'
                  example: 4326.41688
                  nullable: false
              required:
                - title
                - description
                - target_amount
                - category_id
      security: []
    parameters:
      -
        in: path
        name: slug
        description: 'The slug of the .'
        example: 0cl
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'The ID of the .'
        example: '564'
        required: true
        schema:
          type: string
  /api/webhook:
    post:
      summary: 'Permet de capturer les différents évenements lors du payement via Stripe'
      operationId: permetDeCapturerLesDiffrentsvenementsLorsDuPayementViaStripe
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      security: []
  /api/forgot-password:
    post:
      summary: "Permet d'envoyer par mail un lien pour réinitialiser le mot de passe"
      operationId: permetDenvoyerParMailUnLienPourRinitialiserLeMotDePasse
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'validation.email The <code>email</code> of an existing record in the users table.'
                  example: gbailey@example.net
                  nullable: false
              required:
                - email
      security: []
  /api/reset-password:
    post:
      summary: "Permet de réinitialiser le mot de passe en vérifiant l'email et le token"
      operationId: permetDeRinitialiserLeMotDePasseEnVrifiantLemailEtLeToken
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: 'Must match the regex /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/.'
                  example: '=i/#iw{0,1}K)=/kXa{0,1}h)=z{0,1}2)=<{0,1}%m{8,}'
                  nullable: false
              required:
                - password
      security: []
  /api/upload-image:
    post:
      summary: "Retourne l'url absolue de l'image uploadé"
      operationId: retourneLurlAbsolueDeLimageUpload
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: false
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: 'validation.image validation.max.'
                  nullable: false
      security: []
  /api/delete-image:
    post:
      summary: "Permet de supprimer l'image dans l'éditeur de la cagnotte"
      operationId: permetDeSupprimerLimageDansLditeurDeLaCagnotte
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      security: []
  /api/categories:
    get:
      summary: ''
      operationId: getApiCategories
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      id: 1
                      name: santé
                    -
                      id: 2
                      name: animaux
                    -
                      id: 3
                      name: sport
                    -
                      id: 4
                      name: agriculture
                    -
                      id: 5
                      name: habitation
                    -
                      id: 6
                      name: autres
                properties:
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        name: santé
                      -
                        id: 2
                        name: animaux
                      -
                        id: 3
                        name: sport
                      -
                        id: 4
                        name: agriculture
                      -
                        id: 5
                        name: habitation
                      -
                        id: 6
                        name: autres
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: santé
      tags:
        - Endpoints
      security: []
  '/api/campaigns/{slug}-{id}/payment':
    post:
      summary: ''
      operationId: postApiCampaignsSlugIdPayment
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: validation.min.
                  example: bngzmiyvdljnikhwaykcmyuwpwlvqwrsitcpscqldzsnrwtujwvlxjklqppwqbewtnnoqitpxn
                  nullable: false
                email:
                  type: string
                  description: validation.email.
                  example: libby.bradtke@example.com
                  nullable: false
                amount:
                  type: number
                  description: validation.min.
                  example: 79
                  nullable: false
              required:
                - name
                - email
                - amount
      security: []
    parameters:
      -
        in: path
        name: slug
        description: 'The slug of the .'
        example: 0cl
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'The ID of the .'
        example: '564'
        required: true
        schema:
          type: string
  /api/user/dashboard:
    get:
      summary: "permet d'afficher le dashboard de l'utilisateur connecté"
      operationId: permetDafficherLeDashboardDeLutilisateurConnect
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
  /api/user/participants:
    get:
      summary: "retourne la liste de tous les participants récents liés aux cagnottes de l'utilisateur"
      operationId: retourneLaListeDeTousLesParticipantsRcentsLisAuxCagnottesDeLutilisateur
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
  /api/user/profile:
    get:
      summary: "retourne les informations de l'utilisateur connecté actuellement"
      operationId: retourneLesInformationsDeLutilisateurConnectActuellement
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
    delete:
      summary: ''
      operationId: deleteApiUserProfile
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      security: []
  /api/user/profile/edit:
    put:
      summary: "Permet à l'utilisateur de modifier ses informations de base"
      operationId: permetLutilisateurDeModifierSesInformationsDeBase
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: validation.max.
                  example: b
                  nullable: false
                first_name:
                  type: string
                  description: validation.max.
                  example: 'n'
                  nullable: false
                email:
                  type: string
                  description: 'validation.email validation.max.'
                  example: ashly64@example.com
                  nullable: false
                image:
                  type: string
                  format: binary
                  description: 'validation.image validation.max.'
                  nullable: true
              required:
                - name
                - first_name
                - email
      security: []
  /api/user/address:
    get:
      summary: "Permet de récupérer l'adresse postale"
      operationId: permetDeRcuprerLadressePostale
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
  /api/user/iban:
    get:
      summary: "Permet de récupérer l'Iban"
      operationId: permetDeRcuprerLIban
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
    post:
      summary: "Permet d'enregistre l'Iban de l'utilisateur"
      operationId: permetDenregistreLIbanDeLutilisateur
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                iban:
                  type: string
                  description: 'validation.size Must match the regex /^FR[\dA-Z]{25}$/i.'
                  example: FRKHGFOGUUJGMIOFXRCLFXUNODU$/i
                  nullable: false
              required:
                - iban
      security: []
    delete:
      summary: ''
      operationId: deleteApiUserIban
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      security: []
  /api/user/iban/edit:
    put:
      summary: ''
      operationId: putApiUserIbanEdit
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                iban:
                  type: string
                  description: 'validation.size Must match the regex /^FR[\dA-Z]{25}$/i.'
                  example: FRKHGFOGUUJGMIOFXRCLFXUNODU$/i
                  nullable: false
              required:
                - iban
      security: []
